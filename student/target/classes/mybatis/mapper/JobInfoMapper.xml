<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.student.dao.mapper.interfaces.JobInfoMapper">
  <resultMap id="BaseResultMap" type="com.student.dao.mapper.bo.JobInfo">
    <id column="job_id" jdbcType="VARCHAR" property="jobId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="job_intruduce" jdbcType="VARCHAR" property="jobIntruduce" />
    <result column="job_order" jdbcType="VARCHAR" property="jobOrder" />
    <result column="salary" jdbcType="VARCHAR" property="salary" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="createTime" jdbcType="VARCHAR" property="createtime" />
    <result column="endTime" jdbcType="VARCHAR" property="endtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    job_id, job_name, job_intruduce, job_order, salary, number, createTime, endTime
  </sql>
  <select id="selectByExample" parameterType="com.student.dao.mapper.bo.JobInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from jobinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from jobinfo
    where job_id = #{jobId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from jobinfo
    where job_id = #{jobId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.student.dao.mapper.bo.JobInfoExample">
    delete from jobinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.student.dao.mapper.bo.JobInfo">
    insert into jobinfo (job_id, job_name, job_intruduce, 
      job_order, salary, number, 
      createTime, endTime)
    values (#{jobId,jdbcType=VARCHAR}, #{jobName,jdbcType=VARCHAR}, #{jobIntruduce,jdbcType=VARCHAR}, 
      #{jobOrder,jdbcType=VARCHAR}, #{salary,jdbcType=VARCHAR}, #{number,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=VARCHAR}, #{endtime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.student.dao.mapper.bo.JobInfo">
    insert into jobinfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        job_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobIntruduce != null">
        job_intruduce,
      </if>
      <if test="jobOrder != null">
        job_order,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="endtime != null">
        endTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        #{jobId,jdbcType=VARCHAR},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobIntruduce != null">
        #{jobIntruduce,jdbcType=VARCHAR},
      </if>
      <if test="jobOrder != null">
        #{jobOrder,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="endtime != null">
        #{endtime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.student.dao.mapper.bo.JobInfoExample" resultType="java.lang.Long">
    select count(*) from jobinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update jobinfo
    <set>
      <if test="record.jobId != null">
        job_id = #{record.jobId,jdbcType=VARCHAR},
      </if>
      <if test="record.jobName != null">
        job_name = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobIntruduce != null">
        job_intruduce = #{record.jobIntruduce,jdbcType=VARCHAR},
      </if>
      <if test="record.jobOrder != null">
        job_order = #{record.jobOrder,jdbcType=VARCHAR},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=VARCHAR},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=VARCHAR},
      </if>
      <if test="record.endtime != null">
        endTime = #{record.endtime,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update jobinfo
    set job_id = #{record.jobId,jdbcType=VARCHAR},
      job_name = #{record.jobName,jdbcType=VARCHAR},
      job_intruduce = #{record.jobIntruduce,jdbcType=VARCHAR},
      job_order = #{record.jobOrder,jdbcType=VARCHAR},
      salary = #{record.salary,jdbcType=VARCHAR},
      number = #{record.number,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=VARCHAR},
      endTime = #{record.endtime,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.student.dao.mapper.bo.JobInfo">
    update jobinfo
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobIntruduce != null">
        job_intruduce = #{jobIntruduce,jdbcType=VARCHAR},
      </if>
      <if test="jobOrder != null">
        job_order = #{jobOrder,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="endtime != null">
        endTime = #{endtime,jdbcType=VARCHAR},
      </if>
    </set>
    where job_id = #{jobId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.student.dao.mapper.bo.JobInfo">
    update jobinfo
    set job_name = #{jobName,jdbcType=VARCHAR},
      job_intruduce = #{jobIntruduce,jdbcType=VARCHAR},
      job_order = #{jobOrder,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=VARCHAR},
      number = #{number,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=VARCHAR},
      endTime = #{endtime,jdbcType=VARCHAR}
    where job_id = #{jobId,jdbcType=VARCHAR}
  </update>
  
  
  <select id="selectByPage" parameterType="map" resultMap="BaseResultMap">
  	select * from jobinfo ORDER BY CAST(job_id AS SIGNED INTEGER) limit #{low,jdbcType=INTEGER},#{hight,jdbcType=INTEGER}
  </select>
  <select id="selectByPageAndJobName" parameterType="map" resultMap="BaseResultMap">
  	select * from jobinfo where job_name like #{jobName,jdbcType=VARCHAR}
  		ORDER BY CAST(job_id AS SIGNED INTEGER) 
  		limit #{low,jdbcType=INTEGER},#{hight,jdbcType=INTEGER}
  </select>
</mapper>